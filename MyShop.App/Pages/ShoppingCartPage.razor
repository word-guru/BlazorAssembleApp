@page "/ShoppingCart"
@using MyShop.Client
@using MyShop.Models


@inject IShopClient Client

<h2>Корзина:</h2>

@* @foreach (var cart in CartList) *@
@* { *@
@*     <p> *@
@*             @product.Name @product.Price *@
@*             <button @onclick="@((long id) => Client.DeleteCart(id))" class="btn btn-primary">Удалить товар</button> *@
@*         </p> *@
@* } *@
 <table class="table">
        <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Название</th>
            <th scope="col">Цена</th>
            <th scope="col"></th>

        </tr>
        </thead>
        <tbody>

       
        @foreach (var cart in CartList)
        {
           var product = await GetProduct(cart);
            <tr>
                <td>
                    <img src="@product.ImageUrl" alt="product image" style="width:100px;"/>
                </td>
                <td class="align-middle" style="color: #0a58ca">
                    @product.Name
                </td>
            <td class="align-middle">
                    $@product.Price
                </td>
                <td class="align-middle">
                     <button @onclick="@(() => Client.DeleteCart(cart.Id))" class="btn btn-danger">Удалить из корзины</button>
                </td>
               
            </tr>
        }
        </tbody>
    </table>

<div>
    <button @onclick="@(() => Client.ClearCart())" class="btn btn-primary">Очистить корзину</button>
</div>

@code{
    
    private IReadOnlyList<Cart>? CartList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CartList = await Client.GetCartItems();
    }

    private async Task<Product> GetProduct(Cart cart)
    {
        var product = await Client.GetProduct(cart.ProductId);

        return product;
    }

}